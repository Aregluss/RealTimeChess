Some notes

-> constructor test
-> Actually test move function
-> Maybe think about adding assert to check viability of getColor()
-> Restructure tests
-> Fix the constructor for Squares + tie it into getMoveLocation()

Overarching comment, knight + pawn do not apply to these, implement these 

-> Moving off king line of sight (ally) (pinned)
	- Create instance variable called isVisible/Invisible 
		- On getMoveLocations, sets itself Invisible, then calls King's check, if King is in Check cannot move unless it can attack the threatening piece
		
-> Moving into king LoS (body block)
	-Check threatening piece's danger spots, if any piece can move into that danger spot, check is resolved
	
-> King Movement
	- check every spot the king can move's danger zones,
	
	public void checkKingMovement(int row, int column) {
		checkSquare(row+1,column,color);
		checkSquare(row,column+1,color);
		checkSquare(row-1,column,color);
		checkSquare(row,column-1,color);
		checkSquare(row+1,column+1,color);
		checkSquare(row+1,column-1,color);
		checkSquare(row-1,column+1,color);
		checkSquare(row-1,column-1,color);
	}
	
	public void resetKingSquares(boolean color) {
		resetKingSquaresCond(0,0);
		resetKingSquaresCond(1 ,0);
		resetKingSquaresCond(0, 1);
		resetKingSquaresCond(-1, 0);
		resetKingSquaresCond(0,-1);
		resetKingSquaresCond(1 ,1);
		resetKingSquaresCond(1, -1);
		resetKingSquaresCond(-1, 1);
		resetKingSquaresCond(-1,-1);
	}
	
	public void resetKingSquaresCond(int rowIncre, int colIncre) {
		if((this.row+rowIncre < 0 || this.row+rowIncre > 7 ) || 
				( this.column+colIncre < 0 || this.column+colIncre > 7 )) {
			return;
		}
		
		if(color = true) {
			GameBoard.Board[this.row+rowIncre][this.column+colIncre].setWhiteNumber(0);
		}
		
		else {
			GameBoard.Board[this.row+rowIncre][this.column+colIncre].setBlackNumber(0);
		}
	}
	
	public void checkSquare(int row, int column,boolean color) {
		int numcheckedBy = 0;
		ArrayList<ChessPiece> otherPieces = new ArrayList<ChessPiece>();
		ArrayList<ChessPiece> knight = checkHorseHelper(row, column);
		checkPieceFinderHelper(row, column, 1 ,0,otherPieces);
		checkPieceFinderHelper(row, column, 0 ,1,otherPieces);
		checkPieceFinderHelper(row, column, -1 ,0,otherPieces);
		checkPieceFinderHelper(row, column, 0 ,-1,otherPieces);
		checkPieceFinderHelper(row, column, 1 ,1,otherPieces);
		checkPieceFinderHelper(row, column, 1 ,-1,otherPieces);
		checkPieceFinderHelper(row, column, -1 ,1,otherPieces);
		checkPieceFinderHelper(row, column, -1 ,-1,otherPieces);
		
		for(@SuppressWarnings("unused") ChessPiece gooner : knight) {
			numcheckedBy++;
		}
		
		for(ChessPiece gangsta : otherPieces ) {
			gangsta.getMoveLocations();
			for(Square movable : gangsta.locations) {
				if(color = false) {
					if( (movable.getRow() == GameBoard.Bk.getRow()) && (movable.getColumn() == GameBoard.Bk.getColumn()) ) {
						numcheckedBy++;
					}
				}
				else {
					if( (movable.getRow() == GameBoard.Wk.getRow()) && (movable.getColumn() == GameBoard.Wk.getColumn()) ) {
						numcheckedBy++;
					}
				}
			}
		}
		
		if(color == false && !((row < 0 || row > 7 ) || ( column < 0 || column > 7 )) ) {
			GameBoard.Board[row][column].setBlackNumber(numcheckedBy);
		}
		
		if(color == true && !((row < 0 || row > 7 ) || ( column < 0 || column > 7 ))) {
			GameBoard.Board[row][column].setWhiteNumber(numcheckedBy);
		}
		
	}
	
	
	YOOO
	
	if(GameBoard.Board[newRow][newCol].getCurrentPiece() != null) {
			if(GameBoard.Board[newRow][newCol].getCurrentPiece().getColor() != color) {

				if((this.row == GameBoard.Board[newRow][newCol].getCurrentPiece().row &&  this.column != GameBoard.Board[newRow][newCol].getCurrentPiece().column) 
						|| (this.row != GameBoard.Board[newRow][newCol].getCurrentPiece().row &&  this.column == GameBoard.Board[newRow][newCol].getCurrentPiece().column)) {
					System.out.println("CAN YOU FIND ME ROOK");

					if( GameBoard.Board[newRow][newCol].getCurrentPiece() instanceof Queen || GameBoard.Board[newRow][newCol].getCurrentPiece() instanceof Rook) {
						attack.add(new Square(newRow,newCol,GameBoard.Board[newRow][newCol].getCurrentPiece()));
					}
				}
				if( ((Math.abs(newRow) + Math.abs(newCol))/2 == 1)) {
					System.out.println("CAN YOU FIND ME BISHOP");

					if( GameBoard.Board[newRow][newCol].getCurrentPiece() instanceof Queen || GameBoard.Board[newRow][newCol].getCurrentPiece() instanceof Bishop 
							|| GameBoard.Board[newRow][newCol].getCurrentPiece() instanceof Pawn) {
						attack.add(new Square(newRow,newCol,GameBoard.Board[newRow][newCol].getCurrentPiece()));
					}
				}
				return;
			}
		}
		
		if( (GameBoard.Board[row][col].getCurrentPiece() instanceof Queen || GameBoard.Board[row][col].getCurrentPiece() instanceof Bishop 
								|| GameBoard.Board[row][col].getCurrentPiece() instanceof Pawn || GameBoard.Board[row][col].getCurrentPiece() instanceof King))
	